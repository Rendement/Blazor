@using System.Globalization
@inherits Microsoft.AspNetCore.Components.Forms.InputDate<DateOnly?>

@code {
    
    private int currentYear { get; set; } = DateTime.Now.Year;
    private int currentMonth { get; set; } = DateTime.Now.Month;
    private int currentDay { get; set; } = DateTime.Now.Day;

    private DateTime currentDate = DateTime.Now;
    private string currentMonthName => DateTimeFormatInfo.CurrentInfo.GetMonthName(currentMonth);
    private int daysInMonth => DateTime.DaysInMonth(currentYear, currentMonth);
    private DateTime firstDayOfMonth => new DateTime(currentYear, currentMonth, 1);
    private DayOfWeek firstDayOfWeek => firstDayOfMonth.DayOfWeek;

    [Parameter]
    public EventCallback<bool> OnDateSelected { get; set; }

    private IDictionary<int, string> months = DateTimeFormatInfo.CurrentInfo.MonthNames
    .Where(m => !string.IsNullOrEmpty(m))
    .Select((m, i) => new { i, m })
    .ToDictionary(x => x.i + 1, x => x.m);

    private IDictionary<int, string> years = Enumerable.Range(DateTime.Now.Year - 125, 251)
    .ToDictionary(x => x, x => x.ToString());

    private IDictionary<int, string> days = Enumerable.Range(1, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month))
    .ToDictionary(x => x, x => x.ToString());

    private void PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        CurrentValue = DateOnly.FromDateTime(currentDate);

        currentMonth = currentDate.Month;
        currentYear = currentDate.Year;

        currentDay = -1;

        UpdateDays();
    }

    private void NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
        CurrentValue = DateOnly.FromDateTime(currentDate);

        currentMonth = currentDate.Month;
        currentYear = currentDate.Year;

        currentDay = -1;

        UpdateDays();
    }

    private void DaySelected(int day)
    {        
        Console.WriteLine($"{currentMonthName} {day}, {currentYear}");

        CurrentValue = DateOnly.FromDateTime(new DateTime(currentYear, currentMonth, day));
        CurrentValueAsString = CurrentValue?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

        currentDay = day;

        OnDateSelected.InvokeAsync(true);

    }

    private void MonthOnChange(ChangeEventArgs e)
    {
        Console.WriteLine(e.Value);
        currentDate = new DateTime(currentYear, Convert.ToInt32(e.Value), 1);
        CurrentValue = DateOnly.FromDateTime(currentDate);

        currentMonth = Convert.ToInt32(e.Value);

        currentDay = -1;

        UpdateDays();
    }

    private void YearOnChange(ChangeEventArgs e)
    {
        Console.WriteLine(e.Value);
        currentDate = new DateTime(Convert.ToInt32(e.Value), currentMonth, 1);
        CurrentValue = DateOnly.FromDateTime(currentDate);

        currentYear = Convert.ToInt32(e.Value);

        currentDay = -1;

        UpdateDays();
    }

    private void UpdateDays()
    {



        days = Enumerable.Range(1, DateTime.DaysInMonth(currentYear, currentMonth))
        .ToDictionary(x => x, x => x.ToString());
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(CurrentValue.HasValue)
        {
            currentYear = CurrentValue.Value.Year;
            currentMonth = CurrentValue.Value.Month;
            currentDay = CurrentValue.Value.Day;

            currentDate = new DateTime(currentYear, currentMonth, currentDay);

            UpdateDays();

        }
    }
}

<div class="calendar">
    <div class="calendar-header">
        <button class="btn-iterate" @onclick="PreviousMonth">Prev</button>
        <select class="select-month" @bind="currentMonth" @oninput="MonthOnChange">
            @foreach (var month in months.Select(m => new { Key = m.Key, Value = m.Value }))
            {
                <option value="@month.Key">@month.Value</option>
            }
        </select>
        <select class="select-year" @bind="currentYear" @oninput="YearOnChange">
            @foreach (var year in years.Select(y => new { Key = y.Key, Value = y.Value }))
            {
                <option value="@year.Key">@year.Value</option>
            }
        </select>
        <button class="btn-iterate" @onclick="NextMonth">Next</button>
    </div>
    <div class="calendar-body">
        <div class="calendar-weekdays">
            @foreach (var day in Enum.GetValues(typeof(DayOfWeek)))
            {
                <div class="calendar-weekday">@DateTimeFormatInfo.CurrentInfo.GetAbbreviatedDayName((DayOfWeek)day)</div>
            }
        </div>
        <div class="calendar-days">
            @for (int i = 0; i < (int)firstDayOfWeek; i++)
            {
                <div class="calendar-day empty"></div>
            }
            @foreach(var day in days.Select(d => new { Key = d.Key, Value = d.Value }))
            {
                <div class="calendar-day" title="@day.Value" aria-readonly="true" @onclick="() => DaySelected(day.Key)">

                    @if (day.Key == currentDay && 
                    currentMonth == (CurrentValue.HasValue ? CurrentValue.Value.Month : currentMonth) && 
                    currentYear == (CurrentValue.HasValue ? CurrentValue.Value.Year : currentYear))
                    {
                        <strong>@day.Value</strong>
                    }
                    else
                    {
                        @day.Value
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .calendar {
        width: 300px;
        margin: auto;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: .25em;
    }
    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .calendar-body {
        display: flex;
        flex-direction: column;
    }
    .calendar-weekdays, .calendar-days {
        display: flex;
        flex-wrap: wrap;
    }
    .calendar-weekday, .calendar-day {
        width: calc(100% / 7);
        text-align: center;
        padding: 5px;
    }
    .calendar-day.empty {
        @* background-color: #f0f0f0; *@
    }

    .calendar-day:not(.empty):hover {
        cursor: pointer;
        background-color: lightblue;
        border-radius: .25em;
    }

    .select-month, .select-year {
        padding: .25em;
        border: 1px solid #ccc;
        border-radius: .25em;
    }

    .btn-iterate {
        padding: .25em;
        border: none;
        background-color: transparent;
    }

    .btn-iterate:hover {
        cursor: pointer;
        background-color: lightblue;
        border-radius: .25em;
    }
</style>