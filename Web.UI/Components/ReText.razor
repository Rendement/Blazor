@inherits Microsoft.AspNetCore.Components.Forms.InputText
@inject Rendement.Blazor.UI.Interfaces.IStringService stringService

@TextContent

@code {    

    [Parameter]
    public bool ToUpper { get; set; }
    
    [Parameter]
    public bool ToLower { get; set; }
    private RenderFragment? TextContent { get; set; }

    private RenderFragment CreateComponent() => builder =>
    {
        builder.OpenElement(0, "input");
        builder.AddMultipleAttributes(1, AdditionalAttributes);
        if (!string.IsNullOrEmpty(NameAttributeValue))
        {
            builder.AddAttribute(2, "name", NameAttributeValue);
        }
        if (!string.IsNullOrEmpty(CssClass))
        {
            builder.AddAttribute(3, "class", CssClass);
        }
        builder.AddAttribute(4, "type", "text");
        builder.AddAttribute(5, "value", CurrentValueAsString);
        builder.AddAttribute(6, "onchange", EventCallback.Factory.CreateBinder<string?>(this, __value => CurrentValueAsString = FormatValueAsString(__value), CurrentValueAsString));
        builder.AddAttribute(7, "oninput", EventCallback.Factory.CreateBinder<string?>(this, __value => CurrentValueAsString = FormatValueAsString(__value), CurrentValueAsString));
        builder.SetUpdatesAttributeName("value");
        builder.AddElementReferenceCapture(8, __inputReference => Element = __inputReference);
        builder.CloseElement();
    };

    private void RenderComponent() => TextContent = CreateComponent();

    protected override async Task OnParametersSetAsync()
    {

        RenderComponent();
        await base.OnParametersSetAsync();

    }
    
    protected override string? FormatValueAsString(string? value) => ToUpper ? stringService.ToUpperCase(value) : ToLower ? stringService.ToLowerCase(value) : value;

    protected override bool TryParseValueFromString(string? value, out string? result, out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = string.Empty;
        return true;
    }
    
}