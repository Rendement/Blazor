@inherits Microsoft.AspNetCore.Components.Forms.InputDate<DateOnly?>
@using web.ui.Shared
@using Microsoft.JSInterop



<style>

    .re-datepicker-wrapper{
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        flex:1;
        position: relative;
        min-height: fit-content;
    }

    .re-datepicker-container{
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
        flex:1;
    }

    .re-datepicker-calendar{
        display: none;      
        position: absolute;
        top: 100%;
        left: 0;
        z-index: 1000;
        background-color: white;
    }

    .re-datepicker-input{
        width: 2em;
        padding: .25em;
        margin: 0 .25em;
        border: none;
        border-radius: .25em;
        text-align: center;
    }

    .re-datepicker-input:last-of-type{
        width: 4em;
    }

    .re-datepicker-input:focus{
        outline: none;
        box-shadow: 0 0 0 2px #007bff;
    }

    @* .re-datepicker-wrapper:focus-within > .re-datepicker-calendar{
         display: block;
    } *@
    @* .re-datepicker-wrapper:focus-within:has(> .re-datepicker-calendar-btn:focus) > .re-datepicker-calendar {
        display: block;
    } *@

    @* .re-datepicker-wrapper:focus-within:has(.re-datepicker-calendar-btn:focus-within) > .re-datepicker-calendar {
        display: block;
    } *@

    @* .re-datepicker-input:focus-within{display: none;} *@

    .calendar-show { display: block !important; }

    .re-datepicker-calendar-toggle{
        display: none !important;
    }

    @* .re-datepicker-wrapper:focus-within > .re-datepicker-calendar > input.re-datepicker-input:focus-within{
        display: non;
    }  *@

</style>

<div class="re-datepicker-wrapper" id="_datepickerId" @onfocus="() => OnFocusIn()" >  

    <div class="re-datepicker-container" >

        <input 
            onkeydown="@((KeyboardEventArgs e) => OnMonthKeyDown(e))"            
            placeholder="MM" 
            type="text" 
            maxlength="2" 
            pattern="[0-9]*" 
            class="re-datepicker-input" 
            @bind="_month"   
            oninput="this.value = this.value.replace(/[^0-9]$/g, '');" 
        />

        <span>/</span>

        <input 
            onkeydown="@((KeyboardEventArgs e) => OnDayKeyDown(e))"            
            placeholder="DD" 
            type="text" 
            maxlength="2" 
            pattern="[0-9]*" 
            class="re-datepicker-input" 
            @bind="_day"    
            oninput="this.value = this.value.replace(/[^0-9]$/g, '');" 
        />

        <span>/</span>

        <input 
            onkeydown="@((KeyboardEventArgs e) => OnYearKeyDown(e))"            
            placeholder="YYYY" 
            type="text" 
            maxlength="4" 
            pattern="[0-9]*" 
            class="re-datepicker-input" 
            min="@((DateTime.Now.Year) - 125)" 
            max="@((DateTime.Now.Year) + 125)"
            @bind="_year"        
            oninput="this.value = this.value.replace(/[^0-9]$/g, '');" 
        />

        <button class="re-datepicker-calendar-btn" type="button" onclick="@(() => CalendarBtnOnClick())" >ðŸ“…</button>

    </div>
    

    <Calendar 
        Day="@(string.IsNullOrEmpty(_day) ? (int?)null : int.Parse(_day))" 
        Month="@(string.IsNullOrEmpty(_month) ? (int?)null : int.Parse(_month))" 
        Year="@(string.IsNullOrEmpty(_year) ? (int?)null : int.Parse(_year))"
        OnDateSelected="OnDateSelected"
        class="@("re-datepicker-calendar " + _showCalendar)"
        id="@_id"
        tabindex="0">
    </Calendar>

</div>
    




@inject IJSRuntime JSRuntime

@code {

    private string _id = Guid.NewGuid().ToString();
    private string _datepickerId = Guid.NewGuid().ToString();

    private string _month { get; set; } = string.Empty;
    private string _day { get; set; } = string.Empty;
    private string _year { get; set; } = string.Empty;

    private string _showCalendar = string.Empty;
    

    private void OnFocusIn()
    {        
        
        _showCalendar = string.Empty;
        
    }

    private void OnDateSelected(DateOnly date)
    {

        

        if(date != default(DateOnly))
        {

            _month = date.Month.ToString();
            _day = date.Day.ToString();
            _year = date.Year.ToString();
            CurrentValue = new DateOnly(int.Parse(_year), int.Parse(_month), int.Parse(_day));
            CurrentValueAsString = CurrentValue.ToString();

        }else{

            _month = string.Empty;
            _day = string.Empty;
            _year = string.Empty;
            CurrentValue = null;
            CurrentValueAsString = string.Empty;

        }

        
        _showCalendar = string.Empty;
        //JSRuntime.InvokeVoidAsync("ButtonOnClick", _id, _showCalendar ? "block" : "none");


    }

    private void OnMonthKeyDown(KeyboardEventArgs e)
    {Console.WriteLine(e.Key);

        if(String.IsNullOrEmpty(_month))
        {

            if(e.Key == "ArrowDown" || e.Key == "ArrowLeft")
            {
                _month = "12";

            }else if(e.Key == "ArrowUp" || e.Key == "ArrowRight")
            {
                _month = "1";
            }

        }else{
        
            if(e.Key == "ArrowDown" || e.Key == "ArrowLeft")
            {
                int month = int.Parse(_month);
                month--;
                if(month < 1)
                {
                    month = 12;
                }
                _month = month.ToString();
            }
            else if(e.Key == "ArrowUp" || e.Key == "ArrowRight")
            {
                int month = int.Parse(_month);
                month++;
                if(month > 12)
                {
                    month = 1;
                }
                _month = month.ToString();
            }

        }

        SetCurrentValue();

    }

    private void OnDayKeyDown(KeyboardEventArgs e)
    {

        if(String.IsNullOrEmpty(_day))
        {

            if(e.Key == "ArrowDown" || e.Key == "ArrowLeft")
            {
                _day = "31";

            }else if(e.Key == "ArrowUp" || e.Key == "ArrowRight")
            {
                _day = "1";
            }

        }else{
        
            if(e.Key == "ArrowDown" || e.Key == "ArrowLeft")
            {
                int day = int.Parse(_day);
                day--;
                if(day < 1)
                {
                    
                    if(String.IsNullOrEmpty(_month) || String.IsNullOrEmpty(_year))
                    {
                        day = 31;
                        
                    }else{
                        day = DateTime.DaysInMonth(int.Parse(_year), int.Parse(_month));
                    }


                                        
                }
                _day = day.ToString();
            }
            else if(e.Key == "ArrowUp" || e.Key == "ArrowRight")
            {
                int day = int.Parse(_day);
                day++;
                
                if(String.IsNullOrEmpty(_month) || String.IsNullOrEmpty(_year))
                {
                    if(day > 31)
                    {
                        day = 1;
                    }
                    _day = day.ToString();
                    
                }else{
                    if(day > DateTime.DaysInMonth(int.Parse(_year), int.Parse(_month)))
                    {
                        day = 1;
                    }
                    _day = day.ToString();
                }


                
            }

        }

        SetCurrentValue();

    }

    private void OnYearKeyDown(KeyboardEventArgs e)
    {

        if(String.IsNullOrEmpty(_year))
        {

            if(e.Key == "ArrowDown" || e.Key == "ArrowLeft")
            {
                _year = (DateTime.Now.Year + 125).ToString();

            }else if(e.Key == "ArrowUp" || e.Key == "ArrowRight")
            {
                _year = (DateTime.Now.Year - 125).ToString();
            }

        }else{

            if(e.Key == "ArrowDown" || e.Key == "ArrowLeft")
            {
                int year = int.Parse(_year);
                year--;
                if(year < DateTime.Now.Year - 125)
                {
                    year = DateTime.Now.Year + 125;
                }
                _year = year.ToString();
            }
            else if(e.Key == "ArrowUp" || e.Key == "ArrowRight")
            {
                int year = int.Parse(_year);
                year++;
                if(year > DateTime.Now.Year + 125)
                {
                    year = DateTime.Now.Year - 125;
                }
                _year = year.ToString();
            }
            
        }        

        SetCurrentValue();

    }

    private void SetCurrentValue()
    {
        if(!string.IsNullOrEmpty(_month) && !string.IsNullOrEmpty(_day) && !string.IsNullOrEmpty(_year))
        {
            CurrentValue = new DateOnly(int.Parse(_year), int.Parse(_month), int.Parse(_day));
            CurrentValueAsString = CurrentValue.ToString();
        }else{
            CurrentValue = null;
            CurrentValueAsString = string.Empty;
        }
    }
    

    protected override async Task OnInitializedAsync()
    {

        if (Value.HasValue && typeof(DateOnly) == Value.GetType())
        {
            _month = Value.Value.Month.ToString();
            _day = Value.Value.Day.ToString();
            _year = Value.Value.Year.ToString();
        }else{
            _month = string.Empty;
            _day = string.Empty;
            _year = string.Empty;
        }


        

        await base.OnInitializedAsync();
        
    }

    private void CalendarOnClick()
    {
        
        _showCalendar = _showCalendar == "re-datepicker-calendar-toggle" ? string.Empty : "re-datepicker-calendar-toggle";

        
        
        //await JSRuntime.InvokeVoidAsync("ButtonOnClick", _id, _showCalendar ? "block" : "none");

        //await JSRuntime.InvokeVoidAsync("SetEventListeners", _id);
        
        
    }

    private void CalendarBtnOnClick()
    {
        
        //_showCalendar = _showCalendar == "re-datepicker-calendar-toggle" ? string.Empty : "re-datepicker-calendar-toggle";

        //await JSRuntime.InvokeVoidAsync("ButtonOnClick", _id, _showCalendar ? "block" : "none");

        //await JSRuntime.InvokeVoidAsync("SetEventListeners", _id);

        JSRuntime.InvokeVoidAsync("CalendarButtonOnClick", _id, _datepickerId);
        
    }

    
}

<script>

    let focusinClass = false;
    let focusoutClass = false;
    
    document.addEventListener('focusin', (event) => {
        
        //console.log("docFocusIn",focusinClass, focusoutClass,event.target.parentElement);

        focusinClass = !focusinClass;

        
    });

    document.addEventListener('focusout', (event) => {


        const parent = event.target.parentElement;

        focusoutClass = !focusoutClass;

        //console.log("docFocusOut",focusinClass,focusoutClass, parent);

        setTimeout(function(){

            console.log("docFocusOut",focusinClass,focusoutClass, event.target);


            if(focusinClass !== focusoutClass)
            {
                
                const parent = event.target.closest('.re-datepicker-wrapper');
                console.log("hide calendar: ", parent);

                if(parent.classList.contains("re-datepicker-wrapper"))
                {
                    const calendar = parent.querySelector('.re-datepicker-calendar');
                    calendar.classList.remove("calendar-show");
                }

            }
        }, 200)

    });

    CalendarButtonOnClick = (calId, wrpId) => {
        //console.log("CalendarButtonOnClick: " + calId + " " + wrpId);


        const wrapper = document.getElementById(wrpId);
        const calendar = document.getElementById(calId);

        if(calendar.classList.contains("calendar-show"))
        {
            calendar.classList.remove("calendar-show");

            
            

        }else{

            calendar.classList.add("calendar-show");
            calendar.focus();

            

        }


    }

    

    



</script>