@using System.Globalization
@using web.ui.Components
@using Web.UI.Classes
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@* <link href="css/CalendarYearAccordion.css" rel="stylesheet" /> *@


<div class="calendar-accordion-container" id="@_rolodexId">

    <!--Years/Months-->
    <div class="calendar-accordion" id="@_rolodexContainerId">
                   
        @foreach (var year in years)
        {  
            <div class="accordion" id="@(year + "_" + _accordionId)">

                <div class="accordion-header" id="@(year + "_" + _headerId)" @onclick="@(() => ToggleAccordion(year.ToString()))">

                    <div class="calendar-accordion-year" @onclick="() => YearSelected(year)" id="@year">
                        @year
                    </div>

                </div>

                <div class="accordion-content" id="@(year + "_" + _contentId)">

                    <div class="@("accordion-content-body" + (_show ? " show" : ""))" id="@(year + "_" + _contentBodyId)">
                        
                        <div class="calendar-accordion-months">
                            @foreach (int month in Enumerable.Range(1, 12))
                            {
                                <div class="month" @onclick="@(() => MonthSelected(year, month))">
                                    @GetAbbreviatedMonth(month)
                                </div>
                            }
                        </div>

                    </div>

                </div>

            </div>

        }
        
    </div>

    <!--Scrollbar-->
    <div class="calender-scrollbar-container">
        <div class="calendar-accordion-scrollbar-buttons">
            <button @onclick="AddPreviousOnClick" type="button" class="accordion-scroll-up" id="@scrollUpId">▲</button>
            <button @onclick="AddMoreOnClick" type="button" class="accordion-scroll-down" id="@scrollDownId">▼</button>
        </div>
        <div class="calendar-accordion-scrollbar">
            <div class="calendar-accordion-thumb"></div>   
        </div>

    </div>

</div>


<style>

    .calendar-accordion-container{

        overflow: hidden;
        padding: .5em;
        font-family: Arial, Helvetica, sans-serif;
        font-size: small;
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        column-gap: .75em;
        user-select: none;
    }

    .calendar-accordion{
        overflow: hidden;
        height: 17.5em;
        width: 15.25em;
    }

    .calendar-accordion-year{
        height: 2em;
        cursor: pointer;
        background-color: #dfdfdf;
        border-bottom: 1px solid #fff;
        padding: .3em;
    }

    .calendar-accordion-months{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        border-bottom: 1px solid #fff;
        position: relative;
    }

    .calendar-accordion-months div{
        width: calc(100% / 4);
        cursor: pointer;
        padding: .5em;
    }

    .calendar-accordion-months div:hover{
        background-color: #f0f0f0;
        border-radius: .25em;
    }

    @* //////////////////Accordion//////////////////// *@
    .accordion {
        position: relative;
    }

    .accordion-header {        
        position: relative;
        cursor: pointer;
    }

    .accordion-content {
        position: relative;
        overflow: hidden;
        top: 0;
        z-index: -1;
    }    

    .accordion-content-body {
        position: relative;
        transition: height 0.3s ease-in-out;
        height: 0px;
    }

    @* //////////////////Scrollbar//////////////////// *@
    .calendar-accordion-scrollbar{
        position: relative; 
        top: 1.75em; 
        right: 0; 
        width: 1em; 
        height: 14em; 
        background-color: #ddd;
        border-radius: .25em;        
    }

    .calendar-accordion-thumb { 
        position: relative; 
        top: 0; 
        width: 100%; 
        height: calc(14em / 6); 
        background-color: #888; 
        cursor: pointer;
        transition: top .3s ease-out;
        border-radius: .25em;
    }

    .calendar-accordion-thumb:hover {
        background-color: #666;
    }

    .calendar-accordion-scrollbar-buttons{
        position: absolute;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 17.5em;
    }

    .accordion-scroll-up, .accordion-scroll-down {

        position:absolute;        
        border: none;
        left:0;
        padding:0;
        border-radius: .25em;
        font-size: .85em;
        padding: .1em;

    }

    .accordion-scroll-up:hover, .accordion-scroll-down:hover {
        background-color: #888;
    }

    .accordion-scroll-up {
        top: 0; 
            
    }

    .accordion-scroll-down {
        bottom: 0;
    }

</style>


@code{
    [Parameter]
    public int Year { get; set; } = DateTime.Now.Year;

    private bool _close { get; set; } = false;

    private IList<int> years = new List<int>();
    private int selectedYear;

    private string _rolodexId = Guid.NewGuid().ToString();
    private string _rolodexContainerId = Guid.NewGuid().ToString();
    private string _calendarMonthsId = Guid.NewGuid().ToString();

    private string scrollUpId = Guid.NewGuid().ToString();
    private string scrollDownId = Guid.NewGuid().ToString();

    [Parameter]
    public EventCallback<CalendarDate> OnDateSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        selectedYear = Year;
        for (int i = selectedYear; i < selectedYear + 20; i++)
        {
            years.Add(i);
        }   
        await Task.Run(async () => 
        {
            
            @* if (Open)
            {
                _show = true;
                await IsOpen.InvokeAsync(_show);
                await Task.Run(async () => await JSRuntime.InvokeVoidAsync("onToggle", _accordionId, _headerId, _contentId, _contentBodyId));
                
            }  *@


            await JSRuntime.InvokeVoidAsync("initializeScrollEvent", DotNetObjectReference.Create(this), _rolodexId, _rolodexContainerId);
            //await JSRuntime.InvokeVoidAsync("scrollToTop", Year, "auto", _accordionId, _headerId, _contentId, _contentBodyId);
            

            await JSRuntime.InvokeVoidAsync("scrollToTop", Year, "auto", _rolodexContainerId, Year + "_" + _accordionId);
            await Task.Delay(300);

            await JSRuntime.InvokeVoidAsync("onToggle", Year + "_" + _accordionId, Year + "_" + _headerId, Year + "_" + _contentId, Year + "_" + _contentBodyId);
            
        });   

         

    }
    private void AddYears(int year)
    {
        years.Clear();
        
        StateHasChanged();
    }

    private async Task YearSelected(int year)
    {   

        if (selectedYear != year)
        {
            selectedYear = year;
            await JSRuntime.InvokeVoidAsync("closeAllOpenAccordions", _rolodexContainerId);
            await Task.Delay(300);            
            await JSRuntime.InvokeVoidAsync("scrollToTop", year, "smooth"); 
            
            StateHasChanged(); 
        }
               
    }

    private void MonthSelected(int year, int month)
    {
        OnDateSelected.InvokeAsync(new CalendarDate(year, month));
    }

    private string GetAbbreviatedMonth(int month)
    {
        return CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(month);

    }
        
    [JSInvokable]
    public void LoadContainerMoreYears()
    {
        AddContainerMoreNextYears();
        StateHasChanged();
    }

    [JSInvokable]
    public void LoadContainerPreviousYears()
    {
        AddContainerMorePreviousYears();        
        StateHasChanged();
    }

    private void AddPreviousOnClick()
    {

        JSRuntime.InvokeVoidAsync("closeAllOpenAccordions", _rolodexContainerId);
        Task.Delay(300);
        AddContainerMorePreviousYears();
    }

    private void AddMoreOnClick()
    {
        JSRuntime.InvokeVoidAsync("closeAllOpenAccordions", _rolodexContainerId);
        Task.Delay(300);
        AddContainerMoreNextYears();
    }

    private void AddContainerMoreNextYears()
    {
        int lastYear = years[years.Count - 1];
        years.Add(lastYear + 1);
        years.RemoveAt(0);        
    }

    private void AddContainerMorePreviousYears()
    {
        int firstYear = years[0];
        years.Insert(0, firstYear - 1);
        years.RemoveAt(years.Count - 1);
    }

    ////////////////Accordion////////////////////
    
    [Parameter]
    public EventCallback<bool> IsOpen { get; set; }   

    [Parameter]
    public bool Close { get; set; } = false;


    [Parameter]
    public bool Open { get; set; } = false;

    private bool _show = false;
    private bool _previousClose;

    private string _accordionId = Guid.NewGuid().ToString();
    private string _headerId = Guid.NewGuid().ToString();
    private string _contentId = Guid.NewGuid().ToString();
    private string _contentBodyId = Guid.NewGuid().ToString();    

    private async Task ToggleAccordion(string year)
    {

        _show = !_show;
        await IsOpen.InvokeAsync(_show);
        
        
        
        @* await JSRuntime.InvokeVoidAsync("scrollToTop", Year, "auto", _rolodexContainerId, year + "_" + _accordionId);
        await Task.Delay(300);
        await JSRuntime.InvokeVoidAsync("onToggle", year + "_" + _accordionId, year + "_" + _headerId, year + "_" + _contentId, year + "_" + _contentBodyId);
         *@

         
        
        await JSRuntime.InvokeVoidAsync("onToggle", year + "_" + _accordionId, year + "_" + _headerId, year + "_" + _contentId, year + "_" + _contentBodyId);
        await Task.Delay(300);
        await JSRuntime.InvokeVoidAsync("scrollToTop", Year, "auto", _rolodexContainerId, year + "_" + _accordionId);

    }
    
    @* protected override async Task OnInitializedAsync()
    {
        if (Open)
        {
            _show = true;
            await IsOpen.InvokeAsync(_show);
            await Task.Run(async () => await JSRuntime.InvokeVoidAsync("onToggle", _accordionId, _headerId, _contentId, _contentBodyId));
            
        }
    } *@

    protected override async Task OnParametersSetAsync()
    {
        @* if (Close != _previousClose)
        {
            _previousClose = Close;

            if (_show && Close)
            {                
                _show = false;
                await JSRuntime.InvokeVoidAsync("onToggle", _accordionId, _headerId, _contentId, _contentBodyId);
                await IsOpen.InvokeAsync(_show);
            }
        } *@

        //await OnParametersSetAsync();

    }
        

}

<script>
    @* scrollToTop = function (year, behavior, accordionId, headerId, contentId, contentBodyId) {
        
        var element = document.getElementById(year);

        if (element) {           
            
            element.scrollIntoView({ behavior: behavior, block: 'nearest', inline: 'nearest' });            
            onToggle(year + "_" + accordionId, year + "_" + headerId, year + "_" + contentId, year + "_" + contentBodyId);

        }
    } *@

    

    function initializeScrollEvent(dotnetHelper, containerId, containerBodyId) { 

        var container = document.getElementById(containerId);
        var containerBody = document.getElementById(containerBodyId);

        const scrollbar = document.querySelector('.calendar-accordion-scrollbar'); 
        const thumb = document.querySelector('.calendar-accordion-thumb');        
        thumb.style.top = `${71}px`; 

        function handleScroll(event, targetContainer) {
        const threshold = 0; // Adjust the threshold as needed

        if (event.deltaY > 0) {
            dotnetHelper.invokeMethodAsync('LoadContainerMoreYears');
        } else {
            dotnetHelper.invokeMethodAsync('LoadContainerPreviousYears');
        }

        closeAllOpenAccordions(targetContainer.id);
    }


        containerBody.addEventListener('wheel', function (event) {

            event.preventDefault();

            const threshold = 0; // Adjust the threshold as needed
            //thumb.style.top = `${71}px`; 

            
            if (event.deltaY > 0) {
                //if (containerBody.scrollTop + containerBody.clientHeight >= containerBody.scrollHeight - threshold) {
                    dotnetHelper.invokeMethodAsync('LoadContainerMoreYears');
                //}
            } else {
                //if (containerBody.scrollTop <= threshold) {
                    dotnetHelper.invokeMethodAsync('LoadContainerPreviousYears');
                //}
            }

            closeAllOpenAccordions(containerBodyId);

        });

        containerBody.addEventListener('scroll', function (event) { 

            const threshold = 0; // Adjust the threshold as needed
            //thumb.style.top = `${71}px`; 

            if (event.deltaY > 0) {
                //if (containerBody.scrollTop + containerBody.clientHeight >= containerBody.scrollHeight - threshold) {
                    //dotnetHelper.invokeMethodAsync('LoadContainerMoreYears');
                //}
            } else {
                //if (containerBody.scrollTop <= threshold) {
                    //dotnetHelper.invokeMethodAsync('LoadContainerPreviousYears');
                //}
            }

        });

        @* containerBody.addEventListener('touchmove', function () {

            if (containerBody.scrollTop === 0) {
                dotnetHelper.invokeMethodAsync('LoadContainerPreviousYears');
            }
            else if (containerBody.scrollTop + containerBody.clientHeight >= containerBody.scrollHeight) {
                dotnetHelper.invokeMethodAsync('LoadContainerMoreYears');
            }

        });  *@

        thumb.addEventListener('mousedown', (e) => { 
            
            const startY = e.clientY; 
            const startTop = thumb.offsetTop; 
            let previousTop = startTop;
            let mousedownDirection = -1;
            let scrollInterval;            
            
            const onMouseMove = (e) => {     

                closeAllOpenAccordions(containerBodyId);
                
                const deltaY = e.clientY - startY; 
                const newTop = Math.max(0, startTop + deltaY);

                if(newTop + thumb.clientHeight <= scrollbar.clientHeight){
                    thumb.style.top = `${newTop}px`; 
                    const scrollPercent = newTop / (container.clientHeight - thumb.clientHeight); 
                    containerBody.scrollTop = scrollPercent * (containerBody.scrollHeight - containerBody.clientHeight); 

                    if (previousTop > newTop) {
                            mousedownDirection = 0;
                        } else if (previousTop < newTop) {
                            mousedownDirection = 1;
                        }

                    previousTop = newTop;                    

                }else {

                    mousedownDirection = 1;

                }

            }; 
                    
            const onMouseUp = () => { 

                clearInterval(scrollInterval);
                mousedownDirection = -1;
                thumb.style.top = `${71}px`; 
                document.removeEventListener('mousemove', onMouseMove); 
                document.removeEventListener('mouseup', onMouseUp); 
                document.removeEventListener('mousedown', onMouseDown);                
                
            };            

            const onMouseDown = () => { 
                
                scrollInterval = setInterval(() => {

                    if(mousedownDirection === 0){
                        dotnetHelper.invokeMethodAsync('LoadContainerPreviousYears');
                    }else if(mousedownDirection === 1){
                        dotnetHelper.invokeMethodAsync('LoadContainerMoreYears');
                    }

                }, 200); 
                                
            };

            document.addEventListener('mousemove', onMouseMove); 
            document.addEventListener('mouseup', onMouseUp);
            document.addEventListener('mousedown', onMouseDown);
                            
        });        

    }

    ////////////Accordion///////////////////////////////////

    scrollToTop = function (year, behavior, containerId, elementId) {

        var container = document.getElementById(containerId);
        var element = document.getElementById(elementId);

        if (container && element) {
            // Calculate the position of the element relative to the container
            var elementTop = element.offsetTop;
            var containerTop = container.offsetTop;
            var scrollPosition = elementTop - containerTop;

            container.scrollTo({
                top: scrollPosition,
                behavior: 'smooth'
            });
        }
    }

    onToggle = function (accordionId, headerId, contentId, contentBodyId) {

        var accordion = document.getElementById(accordionId);
        var header = document.getElementById(headerId);
        var content = document.getElementById(contentId);
        var contentBody = document.getElementById(contentBodyId);  

        if (accordion && header && content && contentBody) {
            if (contentBody.style.height == "" || contentBody.style.height == '0px') {
                content.style.zIndex = '1';
                contentBody.style.height = contentBody.scrollHeight + 'px';
            }
            else {
                contentBody.style.height = '0px';
                setTimeout(function () {
                    content.style.zIndex = '-1';
                }, 300);
            }
        }

    }

    closeAllOpenAccordions = function (containerId) {

        // Get all elements with the class name 'accordion'
        var container = document.getElementById(containerId);
        var accordionElements = container.getElementsByClassName('accordion');

        // Iterate over all elements and set z-index and height if conditions are met
        for (var i = 0; i < accordionElements.length; i++) {
            var item = accordionElements[i];
            var itemContent = item.querySelector('.accordion-content');
            var itemContentBody = item.querySelector('.accordion-content-body');

            if (itemContent && itemContentBody) {
                if (itemContent.style.zIndex == '1' && itemContentBody.style.height != '0px') {
                    itemContent.style.zIndex = '-1';
                    itemContentBody.style.height = '0px';
                }
            }
        }

    }


</script>