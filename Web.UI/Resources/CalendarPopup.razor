@using System.Globalization
@using Web.UI.Classes
@using Microsoft.JSInterop
@using web.ui.Components
@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject IJSRuntime JSRuntime

@CalendarFragment

@code {

    [Parameter]
    public int? Day { get; set; } = null;

    [Parameter]
    public int? Month { get; set; } = null;

    [Parameter]
    public int? Year { get; set; } = null;

    [Parameter]
    public DateTime? Max { get; set; }

    [Parameter]
    public DateTime? Min { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public EventCallback<CalendarDate> OnDateSelected { get; set; } 

    private int currentYear { get; set; } = DateTime.Now.Year;
    private int currentMonth { get; set; } = DateTime.Now.Month;
    private int currentDay { get; set; } = DateTime.Now.Day;
    private DateTime currentDate = DateTime.Now;

    private int _minYear;
    private int _maxYear = DateTime.MaxValue.Year;

    private DateTime firstDayOfMonth => new DateTime(currentYear, currentMonth, 1);
    private DayOfWeek firstDayOfWeek => firstDayOfMonth.DayOfWeek;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InitializeMinMaxYears();
        SetCalendarOnInit(Year, Month, Day);
        RenderComponent();
    }

    protected override void OnParametersSet()
    {

        if(ToggleAccordion || !ToggleAccordion){
            ToggleYearMonthView = false;
        }

        base.OnParametersSet();
        InitializeMinMaxYears();
        SetCalendarOnInit(Year, Month, Day);
        RenderComponent();
        
    }

    private void InitializeMinMaxYears()
    {
        _minYear = Min.HasValue ? Min.Value.Year : DateTime.MinValue.Year;
        _maxYear = Max.HasValue ? Max.Value.Year : DateTime.MaxValue.Year;
    }

    private void SetCalendarOnInit(int? year, int? month, int? day)
    {       

        if (year.HasValue && month.HasValue && day.HasValue)
        {
            currentYear = year.Value;
            currentMonth = month.Value;
            currentDay = day.Value;
            currentDate = new DateTime(currentYear, currentMonth, currentDay);
        }else{
            currentYear = DateTime.Now.Year;
            currentMonth = DateTime.Now.Month;
            currentDay = DateTime.Now.Day;
            currentDate = DateTime.Now;
        }

        if (Min.HasValue)
        {
            _minYear = Min.Value.Year;
        }

        if (Max.HasValue)
        {
            _maxYear = Max.Value.Year;
        }
    }

    private void PreviousMonth() => SetCalendarMonth(-1);

    private void NextMonth() => SetCalendarMonth(1);

    private void SetCalendarMonth(int month)
    {
        currentDate = currentDate.AddMonths(month);
        currentMonth = currentDate.Month;
        currentYear = currentDate.Year;
        currentDay = -1;

        int value = Convert.ToInt32(currentYear);
        if (value < _minYear)
        {
            value = _minYear;
        }
        else if (value > _maxYear)
        {
            value = _maxYear;
        }

        SetCalendarOnChange(new DateTime(Convert.ToInt32(value), currentMonth, 1), Convert.ToInt32(value), currentMonth);
    }

    private void MonthOnChange(ChangeEventArgs e) => SetCalendarOnChange(new DateTime(currentYear, Convert.ToInt32(e.Value), 1), currentYear, Convert.ToInt32(e.Value));

    private void YearOnChange(ChangeEventArgs e) { 

        int value = Convert.ToInt32(e.Value);
        if (value < _minYear)
        {
            value = _minYear;
            currentMonth = Min?.Month ?? 1;
            currentDay = Min?.Day ?? 1;
            currentYear = Min?.Year ?? 1;
        }
        else if (value > _maxYear)
        {
            value = _maxYear;
            currentMonth = Max?.Month ?? 1;
            currentDay = Max?.Day ?? 1;
            currentYear = Max?.Year ?? 1;
        }

        SetCalendarOnChange(new DateTime(Convert.ToInt32(value), currentMonth, 1), Convert.ToInt32(value), currentMonth); 

    }

    private void SetCalendarOnChange(DateTime date, int year, int month)
    {
        currentYear = year;
        currentMonth = month;
        currentDate = date;
        currentDay = -1;
    }

    private void DaySelected(int day)
    {
        currentDay = day;

        CalendarDate calendarDate = new CalendarDate
        {
            Day = day,
            Month = currentMonth,
            Year = currentYear,
                Type = "Day"
        };
       

        OnDateSelected.InvokeAsync(calendarDate);
    }

    private void ClearDate()
    {
        if (Max.HasValue && Max.Value.Date < DateTime.Now.Date)
        {
            currentDay = Max.Value.Day;
            currentMonth = Max.Value.Month;
            currentYear = Max.Value.Year;
            currentDate = Max.Value;
        }
        else if (Min.HasValue && Min.Value.Date > DateTime.Now.Date)
        {
            currentDay = Min.Value.Day;
            currentMonth = Min.Value.Month;
            currentYear = Min.Value.Year;
            currentDate = Min.Value;

        } else{
            currentDay = DateTime.Now.Day;
            currentMonth = DateTime.Now.Month;
            currentYear = DateTime.Now.Year;
            currentDate = DateTime.Now;
        }

        CalendarDate calendarDate = new CalendarDate
            {
                Day = null,
                Month = null,
                Year = null,
                Type = "Clear"
            };

        OnDateSelected.InvokeAsync(calendarDate);
    }

    private void SetToday()
    {

        
        currentDay = DateTime.Now.Day;
        currentMonth = DateTime.Now.Month;
        currentYear = DateTime.Now.Year;
        currentDate = DateTime.Now;

        CalendarDate calendarDate = new CalendarDate
            {
                Day = DateTime.Now.Day,
                Month = DateTime.Now.Month,
                Year = DateTime.Now.Year,
                Type = "Today"
            };
        
        OnDateSelected.InvokeAsync(calendarDate);
        
    }

    private void IncrementSelectMonth()
    {
        int month = currentMonth + 1;
        if (month > 12)
        {
            month = 1;
        }
        MonthOnChange(new ChangeEventArgs { Value = month });
    }

    private bool DisableMonthIncrementBtn()
    {
        if (currentYear == Max?.Year && currentMonth == Max?.Month)
        {
            return true;
        }
        return false;
    }

    private bool DisableMonthDecrementBtn()
    {
        if (currentYear == Min?.Year && currentMonth == Min?.Month)
        {
            return true;
        }
        return false;
    }

    private void DecrementSelectMonth()
    {
        int month = currentMonth - 1;
        if (month < 1)
        {
            month = 12;
        }
        MonthOnChange(new ChangeEventArgs { Value = month });
    }

    private bool DayIsDisabled(int day)
    {
        DateTime date = new DateTime(currentYear, currentMonth, day);
        if (Min.HasValue && date < Min.Value)
        {
            return true;
        }
        if (Max.HasValue && date > Max.Value)
        {
            return true;
        }
        return false;
    }

    private string SetActiveDay(int day)
    {
        if (day == Day && currentMonth == Month && currentYear == Year)
        {
            return "calendar-day active";
        }
        else if (day == DateTime.Now.Day && currentMonth == DateTime.Now.Month && currentYear == DateTime.Now.Year)
        {
            return "calendar-day active";
        }
        return "calendar-day";
    }

    private void IncrementSelectYear()
    {
        int year = currentYear + 1;
        if (year > _maxYear)
        {
            year = _maxYear;
        }
        YearOnChange(new ChangeEventArgs { Value = year });
    }

    private bool DisableYearIncrementBtn()
    {
        if (currentYear == _maxYear)
        {
            return true;
        }
        return false;
    }

    private void DecrementSelectYear()
    {
        int year = currentYear - 1;
        if (year < _minYear)
        {
            year = _minYear;
        }
        YearOnChange(new ChangeEventArgs { Value = year });
    }

    private bool DisableYearDecrementBtn()
    {
        if (currentYear == _minYear)
        {
            return true;
        }
        return false;
    }

    private int GetPreviousMonthStartRange()
    { 
        int year = currentMonth - 1 == 0 ? currentYear - 1 : currentYear;
        int month = currentMonth - 1 == 0 ? 12 : currentMonth - 1;
        int days = (int)DateTime.DaysInMonth(year, month);
        int start = days - (int)firstDayOfWeek;

        return start;
    }

    private int GetPreviousMonthRange()
    {
        return (int)firstDayOfWeek;
    }

    private void DayPreviousSelected(int day)
    {
        currentDay = day;
        currentMonth = currentMonth - 1 == 0 ? 12 : currentMonth - 1;
        currentYear = currentMonth - 1 == 0 ? currentYear - 1 : currentYear;

        CalendarDate calendarDate = new CalendarDate
            {
                Day = day,
                Month = currentMonth,
                Year = currentYear,
                Type = "Previos"
            };


        OnDateSelected.InvokeAsync(calendarDate);
    }

    private string SetPreviousActiveDay(int day)
    {
        int month = currentMonth - 1 == 0 ? 12 : currentMonth - 1;
        int year = currentMonth - 1 == 0 ? currentYear - 1 : currentYear;
        if (currentDay == day && month == Month && year == Year)
        {
            return "calendar-day active";
        }
        return "calendar-day not-current";
    }

    private bool PreviousDayIsDisabled(int day)
    {
        int month = currentMonth - 1 == 0 ? 12 : currentMonth - 1;
        int year = currentMonth - 1 == 0 ? currentYear - 1 : currentYear;
        DateTime date = new DateTime(year, month, day);
        if (Min.HasValue && date < Min.Value)
        {
            return true;
        }
        if (Max.HasValue && date > Max.Value)
        {
            return true;
        }
        return false;
    }

    private int GetNextMonthStartRange()
    {
        return 1;
    }

    private int GetNextMonthRange()
    {
        return 42 - (DateTime.DaysInMonth(currentYear, currentMonth) + GetPreviousMonthRange());
    }

    private void DayNextSelected(int day)
    {
        currentDay = day;
        currentMonth = currentMonth + 1 == 13 ? 1 : currentMonth + 1;
        currentYear = currentMonth + 1 == 13 ? currentYear + 1 : currentYear;

        CalendarDate calendarDate = new CalendarDate
            {
                Day = day,
                Month = currentMonth,
                Year = currentYear,
                Type = "Next"
            };

        OnDateSelected.InvokeAsync(calendarDate);
    }

    private string SetNextActiveDay(int day)
    {

        int month = currentMonth + 1 == 13 ? 1 : currentMonth + 1;
        int year = currentMonth + 1 == 13 ? currentYear + 1 : currentYear;

        if (currentDay == day && month == Month && year == Year)
        {
            return "calendar-day active";
        }
        return "calendar-day not-current";
    }

    private bool NextDayIsDisabled(int day)
    {
        int month = currentMonth + 1 == 13 ? 1 : currentMonth + 1;
        int year = currentMonth + 1 == 13 ? currentYear + 1 : currentYear;
        DateTime date = new DateTime(year, month, day);
        if (Min.HasValue && date < Min.Value)
        {
            return true;
        }
        if (Max.HasValue && date > Max.Value)
        {
            return true;
        }
        return false;
    }

    private bool DisableTodayBtn()
    {
        if (currentDay == DateTime.Now.Day && currentMonth == DateTime.Now.Month && currentYear == DateTime.Now.Year)
        {
            return true;
        }
        else if (Min.HasValue && Min.Value.Date > DateTime.Now.Date)
        {
            return true;
        }
        else if (Max.HasValue && Max.Value.Date < DateTime.Now.Date)
        {
            return true;
        }
        return false;
    }

    [Parameter]
    public bool ToggleAccordion { get; set; } = false;

    private bool ToggleYearMonthView = false;

    private void ToggleCalendarView()
    {
        ToggleYearMonthView = !ToggleYearMonthView;        
    }    

    private RenderFragment? CalendarFragment { get; set; }

    private void RenderComponent() => CalendarFragment = CreateComponent();

    private RenderFragment CreateComponent() => builder =>
    {
        builder.OpenElement(0, "div");

        builder.AddMultipleAttributes(1, AdditionalAttributes);
        builder.AddAttribute(2, "class", "calendar " + (AdditionalAttributes != null && AdditionalAttributes.ContainsKey("class") ? AdditionalAttributes["class"] : ""));
        builder.AddAttribute(2, "tabindex", "-1");

        //start of calendar header
        builder.OpenElement(4, "div");
        builder.AddAttribute(5, "class", "calendar-header");      

        //start of month/year
        builder.OpenElement(6, "button");
        builder.AddAttribute(7, "type", "button");
        builder.AddAttribute(16, "onclick", EventCallback.Factory.Create(this, () => ToggleCalendarView()));
        builder.AddAttribute(7, "class", "calendar-header-action calendar-accordion-show-btn" + (ToggleYearMonthView ? " accordionShow" : ""));
        builder.AddContent(8, CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(currentMonth));//current month
        builder.AddContent(9, " ");
        builder.AddContent(11, currentYear);//current year
        builder.AddContent(12, " ");
        builder.OpenElement(13, "i");
        builder.AddAttribute(14, "class", "fa-solid fa-caret-down");
        builder.CloseElement();        
        builder.CloseElement(); //end of month/year        
        //end of year input7

        if (!ToggleYearMonthView){            

            builder.OpenElement(4, "div");

            //start of next button            
            builder.AddAttribute(5, "class", "calendar-header-action iterate-monthyear");
            builder.OpenElement(27, "button");
            builder.AddAttribute(28, "type", "button");
            builder.AddAttribute(29, "class", "calendar-header-action calendar-monthyear-btn");
            builder.AddAttribute(29, "tabindex", "-1");
            builder.AddAttribute(30, "onclick", EventCallback.Factory.Create(this, NextMonth));
            builder.OpenElement(10, "i");
            builder.AddAttribute(11, "class", "fa-solid fa-arrow-up");
            builder.CloseElement();
            builder.CloseElement();
            //end of next button

            //start of prev button//start of prev button
            builder.OpenElement(6, "button");
            builder.AddAttribute(7, "type", "button");
            builder.AddAttribute(8, "class", "calendar-header-action calendar-monthyear-btn");
            builder.AddAttribute(9, "tabindex", "-1");
            builder.AddAttribute(9, "onclick", EventCallback.Factory.Create(this, PreviousMonth));
            builder.OpenElement(10, "i");
            builder.AddAttribute(11, "class", "fa-solid fa-arrow-down");
            builder.CloseElement();
            builder.CloseElement();
            //end of prev button 

            builder.CloseElement();

        }

        //end of calendar header
        builder.CloseElement();


        if (ToggleYearMonthView)
        {

            builder.OpenComponent<CalendarPopupYear>(0);
            builder.AddAttribute(1, "OnDateSelected", EventCallback.Factory.Create<CalendarDate>(this, (date) => {
                currentYear = date.Year ?? DateTime.Now.Year;
                currentMonth = date.Month ?? DateTime.Now.Month;  
                currentDate = new DateTime(currentYear, currentMonth, 1);          
                ToggleCalendarView();
            }));
            builder.AddAttribute(2, "Year", currentYear);
            builder.CloseComponent();

        }
        else {

            //start of calendar body
            builder.OpenElement(32, "div");
            builder.AddAttribute(33, "class", "calendar-body");

            //start of calendar weekdays
            builder.OpenElement(34, "div");
            builder.AddAttribute(35, "class", "calendar-weekdays");

            foreach (var day in Enum.GetValues(typeof(DayOfWeek)))
            {
                builder.OpenElement(36, "div");
                builder.AddAttribute(37, "title", DateTimeFormatInfo.CurrentInfo.GetDayName((DayOfWeek)day));
                builder.AddAttribute(38, "class", "calendar-weekday");
                builder.AddContent(39, DateTimeFormatInfo.CurrentInfo.GetAbbreviatedDayName((DayOfWeek)day).Substring(0, 1));
                builder.CloseElement();
            }
            builder.CloseElement();
            //end of calendar weekdays

            //start of calendar days
            builder.OpenElement(40, "div");
            builder.AddAttribute(41, "class", "calendar-days");        

            foreach (int pDay in Enumerable.Range(GetPreviousMonthStartRange(), GetPreviousMonthRange()))
            {
                builder.OpenElement(44, "button");
                builder.AddAttribute(45, "type", "button");
                builder.AddAttribute(47, "title", pDay.ToString());
                builder.AddAttribute(48, "aria-readonly", true);
                builder.AddAttribute(49, "tabindex", "-1");
                builder.AddAttribute(49, "disabled", PreviousDayIsDisabled(pDay));
                builder.AddAttribute(49, "onclick", EventCallback.Factory.Create(this, () => DayPreviousSelected(pDay)));
                builder.AddAttribute(49, "class", SetPreviousActiveDay(pDay));
                builder.AddContent(52, pDay);
                builder.CloseElement();
            }

            foreach (int day in Enumerable.Range(1, DateTime.DaysInMonth(currentYear, currentMonth)))
            {

                builder.OpenElement(44, "button");
                builder.AddAttribute(45, "type", "button");
                builder.AddAttribute(47, "title", day.ToString());
                builder.AddAttribute(48, "aria-readonly", true);
                builder.AddAttribute(49, "tabindex", "-1");
                builder.AddAttribute(49, "disabled", DayIsDisabled(day));
                builder.AddAttribute(49, "onclick", EventCallback.Factory.Create(this, () => DaySelected(day)));
                builder.AddAttribute(49, "class", SetActiveDay(day));            
                builder.AddContent(52, day);
                builder.CloseElement();

            }        

            foreach (int nDay in Enumerable.Range(GetNextMonthStartRange(), GetNextMonthRange()))
            {
                builder.OpenElement(44, "button");
                builder.AddAttribute(45, "type", "button");
                builder.AddAttribute(47, "title", nDay.ToString());
                builder.AddAttribute(48, "aria-readonly", true);
                builder.AddAttribute(49, "tabindex", "-1");
                builder.AddAttribute(49, "disabled", NextDayIsDisabled(nDay));
                builder.AddAttribute(49, "onclick", EventCallback.Factory.Create(this, () => DayNextSelected(nDay)));
                builder.AddAttribute(49, "class", SetNextActiveDay(nDay));
                builder.AddContent(52, nDay);
                builder.CloseElement();
            }

            builder.CloseElement();
            //end of calendar days

            builder.OpenElement(54, "div");
            builder.AddAttribute(55, "class", "calendar-footer");

            builder.OpenElement(6, "button");
            builder.AddAttribute(7, "type", "button");
            builder.AddAttribute(8, "class", "calendar-footer-btn clear-btn");
            builder.AddAttribute(9, "tabindex", "-1");
            builder.AddAttribute(9, "onclick", EventCallback.Factory.Create(this, ClearDate));
            builder.AddContent(10, "Clear");
            builder.CloseComponent();

            builder.OpenElement(6, "button");
            builder.AddAttribute(7, "type", "button");
            builder.AddAttribute(8, "class", "calendar-footer-btn today-btn");
            builder.AddAttribute(9, "tabindex", "-1");
            builder.AddAttribute(9, "disabled", DisableTodayBtn());
            builder.AddAttribute(9, "onclick", EventCallback.Factory.Create(this, SetToday));
            builder.AddContent(10, "Today");
            builder.CloseComponent();

            builder.CloseElement();

            builder.CloseElement();
        //end of calendar body

        }

        builder.CloseElement();

    };

}

<style>
    .calendar {
        width: 18em;
        margin: auto;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: .5em;
        background-color: #fff;
        box-shadow: 2px 2px 5px .2px lightgray;
        font-family: Arial, sans-serif;
        font-size: .8em;
        
        
    }
    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        column-gap: .25em;
        min-height: 2em;
    }

    .calendar-accordion-show-btn {
        border: none;
        background-color: inherit;
        padding: .25em;
        border-radius: .25em;
        background-color: inherit;
        font-size:inherit;
    }

    .calendar-body {
        display: flex;
        flex-direction: column;
        max-height: 210px;
        overflow-y: auto;
    }

    .calendar-weekdays, .calendar-days {
        display: flex;
        flex-wrap: wrap;
    }
    .calendar-weekday, .calendar-day {
        width: calc(100% / 7);
        text-align: center;
        padding: 5px;
    }

    .calendar-day {
        padding: .25em;
        border: none;
        background-color: transparent;
        border-radius: .25em;
    }

    .calendar-day.active {
        background-color: lightblue;
        border-radius: .25em;
        font-weight: bold;
    }

    .calendar-day:not(.empty):not([disabled]):hover {
        cursor: pointer;
        background-color: lightblue;
        border-radius: .25em;
    }

    .calendar-day.not-current {
        color: #ccc;
    }

    .calendar-day-btn {        
        border: none;
        background-color: inherit;
        line-height: .5 !important;
    }

    .calendar-day-btn i {
        font-size: .9em;
    }

    .calendar-footer-btn {
        border: none;
        background-color: inherit;
        padding: .25em;
        border-radius: .25em;
        background-color: inherit;
        font-size:inherit;
    }

    .calendar-day-btn:hover, .calendar-monthyear-btn:hover, .calendar-footer-btn:not([disabled]):hover {
        cursor: pointer;
        background-color: lightblue;
        border-radius: .25em;
    }

    .calendar-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        min-height: 2em;
    }

    .calendar-header-action:not(.iterate-monthyear) {
        cursor: pointer;
    }

    .calendar-header-action.accordionShow {
        opacity: .7;
    }

    .calendar-header-action.select-month, .calendar-header-action.select-year{
        border: 1px solid #ccc !important;
        border-radius: .25em;
        background-color: inherit;
        display:flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: nowrap;
        height: 2em;
    }

    .calendar-header-action.select-month > input, .calendar-header-action.select-year > input {        
        border: none !important;
        background-color: transparent !important;
        flex:1;
        max-width: 5.5em;
        padding:.25em;
    }

    .calendar-header-action.select-year > input{
        max-width:3em;
    }

    .calendar-header-action.select-year > input:focus-visible {
        border:none;
        outline:none;
    }

    .calendar-header-action.iterate-date{        
        flex:1;        
        display: flex;
        flex-direction: column;
    }

    .calendar-header-action.select-year > input::-webkit-outer-spin-button,
    .calendar-header-action.select-year > input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    .calendar-header-action.select-year > input[type=number] {
        -moz-appearance: textfield;
    }

    .calendar-header-action.iterate-monthyear {
        flex: 1;
        display: flex;
        flex-direction: row;
        height: 2em;
        font-size: .75em;
        align-items: center;
        justify-content: flex-end;
    }

    .calendar-monthyear-btn {
        padding: .25em;
        border-radius: .25em;
        background-color: inherit;
        font-size: 1.5em;
        border:none;
        outline:none;
    }

    .calendar-monthyear-view {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .calendar-monthyear-view > .year {
        
        height: 2.5em;
        width:100%;
        padding: .5em;
        font-weight: bold;
        border-bottom: solid 1px lightgray;
        cursor:pointer;
        text-align: center;
    }

    .calendar-monthyear-view > .year:hover {
        opacity: .8;
        background-color: lightblue;
        
    }

    .calendar-monthyear-view > .months {
        display: none;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        width: 100%;
    }

    


</style>     