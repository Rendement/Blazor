@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@page "/datepicker"

<PageTitle>Date Picker</PageTitle>

<h3>Date Picker</h3>
@* <ReDatePicker @bind-Value="selectedDate"></ReDatePicker>

<p>Selected Date: @(selectedDate.HasValue ? selectedDate.Value.ToShortDateString() : "No date selected")</p> *@

@* <ReCalendar></ReCalendar> *@

<input type="date" @bind="selectedDate" />




<div class="container">
    <div class="container-header">
        Header
    </div>
    <div class="container-body" id="@containerBodyId">



        <div class="container-years">
            @foreach (var year in cYears)
            {
                <div class="year">@year</div>
            }
        </div>

        <div class="scroll-buttons">
            <div class="scroll-thumb"></div>
            
            @* <button @onclick="LoadContainerPreviousYears" class="scroll-up" id="@scrollUpId">▲</button>
            <button @onclick="LoadContainerMoreYears" class="scroll-down" id="@scrollDownId">▼</button> *@
            
        </div>
    </div>

    <div class="container-footer">Footer</div>
</div>

@* <div class="scroll-container"> 
    <div class="content"> 
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation unt mollit anim id est laborum.</p> <!-- Add more content here to make the container scrollable --> 
    </div> 
    <div class="custom-scrollbar"> 
        <div class="thumb"></div> 
    </div> 
</div> *@


<style>

@* .scroll-container { 
    position: relative; 
    width: 300px; 
    height: 100px; 
    overflow: hidden; 
    background-color: white; 
    border: 1px solid #ccc; 
    border-radius: 5px; 
    } 
.content { height: 100%; overflow-y: scroll; padding-right: 20px; /* Space for the custom scrollbar */ } 
.custom-scrollbar { position: absolute; top: 0; right: 0; width: 20px; height: 100%; background-color: #ddd; } 
.thumb { position: absolute; top: 0; width: 100%; height: 50px; background-color: #888; cursor: pointer;} *@

    .container {
        display: flex;
        flex-direction: column;        
        border:1px solid lightgrey;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: .5em;
        height: 17.5em;
        width: 13.7em;
        position: relative;
        overflow: hidden;
     }

     .container-body{
        position: relative;
        overflow:hidden;
     }

    .container-header, .container-footer {
        display: flex;
        align-items: center;
        height: 2.5em;
        width: 100%;
        position:absolute;
        background-color: white;
        z-index: 1;

    }

    .container-header {
        top: 0;
    }

    .container-footer {
        bottom: 0;
    }

    .container-body {
        display: flex;
        flex-direction: row;
    }

    .container-years {
        width:11em;
    }

    .container-years .year{
        display: flex;
        font-size: .9em;
        align-items: center;
        height: 2em;
        width: 100%;
        background-color: white;
        border-bottom: 1px solid lightgrey;
        cursor: pointer;
        user-select: none;
    }

    .scroll-buttons{
        position: absolute; 
        top: 2.5em; 
        right: 0; 
        width: 7px; 
        height: 12.25em; 
        background-color: #ddd;
        border-radius: .25em;
        
    }

    .scroll-thumb { 
        position: absolute; 
        top: 0; 
        width: 100%; 
        height: 50px; 
        background-color: #888; 
        cursor: pointer;
        transition: top .3s ease-out;
        border-radius: .25em;
    }

    .scroll-up, .scroll-down {
        position:absolute;
        right:0;

    }

    .scroll-up {
        top: 0;
    }

    .scroll-down {
        bottom: 0;
    }

     



@*
    .container-header {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 2em;
        background-color: lightgray;
        width: 100%;
        position:absolute;
        top:0;
        padding-right: 20px; /* Space for scrollbar buttons */
    }

    .container-body {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 12.75em;
        width: 100%;
        -ms-overflow-style: none; /* For Internet Explorer and Edge */
scrollbar-width: none; /* For Firefox */
overflow-y: scroll; /* Ensures vertical scrolling */
overflow-x:none;

        position:absolute;
        padding: 0.5em;
        top: 2em;
    }

    .container-body::-webkit-scrollbar {
        display: none; /* For Chrome, Safari and Opera */
    }

.scroll-container {
    width: 300px;
    height: 20px;
    overflow-y: scroll;
    padding: 20px;
    background-color: #fff;
    border: 1px solid #ccc;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Custom scrollbar styles */
.container-body::-webkit-scrollbar {
    width: 12px;
}

.container-body::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
}

.container-body::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 10px;
}

.container-body::-webkit-scrollbar-thumb:hover {
    background: #555;
}

.scroll-buttons {
    position: absolute;
    top: 0;
    right: 0;
    display: flex;
    flex-direction: column;
    height: 100%;
}

.scroll-buttons button {
    width: 20px;
    height: 20px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
    margin: 2px 0;
}

.scroll-buttons button:hover {
    background-color: #0056b3;
} *@


</style>


@code {
    private DateOnly? selectedDate = DateOnly.FromDateTime(DateTime.Today.AddYears(-49).AddMonths(-9).AddDays(5));
    
    [JSInvokable]
    public void LoadContainerMoreYears()
    {

        //Console.WriteLine("LoadContainerMoreYears");


        AddContainerMoreNextYears();
        
        StateHasChanged();
    }

    [JSInvokable]
    public void LoadContainerPreviousYears()
    {

        //Console.WriteLine("LoadContainerPreviousYears");

        AddContainerMorePreviousYears();
        
        StateHasChanged();
    }

    private void AddContainerMoreNextYears()
    {
        int newEndYear = cYears[cYears.Count - 1] + 1;

        
        for (int i = cYears[cYears.Count - 1] + 1; i <= newEndYear; i++)
        {
            cYears.Add(i);
        }

        //if (years.Count > 20)
        //{

            cYears.RemoveRange(0, 1);
            
        //}
    }

    private void AddContainerMorePreviousYears()
    {
        int newStartYear = cYears[0] - 1;
        
        for (int i = cYears[0] - 1; i >= newStartYear; i--)
        {
            cYears.Insert(0, i);
        }

        //if (years.Count > 20)
        //{
            cYears.RemoveRange(cYears.Count - 1, 1);
        //}
    }

   
    private string containerBodyId = Guid.NewGuid().ToString();
    private string scrollUpId = Guid.NewGuid().ToString();
    private string scrollDownId = Guid.NewGuid().ToString();

    private List<int> cYears = new List<int>();

        
    protected override void OnInitialized()
    {
        base.OnInitialized();
        cYears = new List<int>();
        for (int i = DateTime.Today.Year - 10; i <= DateTime.Today.Year + 10; i++)
        {
            cYears.Add(i);
        }
        Task.Run(async () => await JSRuntime.InvokeVoidAsync("initializeScrollEvent", DotNetObjectReference.Create(this), containerBodyId));
        
    }

}

<script>

    

    
    function initializeScrollEvent(dotnetHelper, containerBodyId) {

        var containerBody = document.getElementById(containerBodyId); 

        const container = document.querySelector('.container-body'); 
        const content = document.querySelector('.container-years'); 
        const scrollbar = document.querySelector('.scroll-buttons'); 
        const thumb = document.querySelector('.scroll-thumb');        
        thumb.style.top = `${75}px`; 

        containerBody.addEventListener('wheel', function (event) {  

            thumb.style.top = `${75}px`; 

            if (event.wheelDeltaY > 0) {
                dotnetHelper.invokeMethodAsync('LoadContainerPreviousYears');
            }
            else {
                dotnetHelper.invokeMethodAsync('LoadContainerMoreYears');
            }

        });

        containerBody.addEventListener('scroll', function (event) { 

            thumb.style.top = `${75}px`; 

            if (containerBody.scrollTop === 0) {
                dotnetHelper.invokeMethodAsync('LoadContainerPreviousYears');
            }
            else if (containerBody.scrollTop + containerBody.clientHeight >= containerBody.scrollHeight) {
                dotnetHelper.invokeMethodAsync('LoadContainerMoreYears');
            }

        });

        containerBody.addEventListener('touchmove', function () {

            thumb.style.top = `${75}px`; 

            if (containerBody.scrollTop === 0) {
                dotnetHelper.invokeMethodAsync('LoadContainerPreviousYears');
            }
            else if (containerBody.scrollTop + containerBody.clientHeight >= containerBody.scrollHeight) {
                dotnetHelper.invokeMethodAsync('LoadContainerMoreYears');
            }

        });

        thumb.addEventListener('mousedown', (e) => {            
            
            const startY = e.clientY; 
            const startTop = thumb.offsetTop; 
            let previousTop = startTop;
            let mousedownDirection = -1;
            let scrollInterval;
            
            const onMouseMove = (e) => {             
                
                const deltaY = e.clientY - startY; 
                const newTop = Math.max(0, startTop + deltaY);

                if(newTop + thumb.clientHeight <= scrollbar.clientHeight){
                    thumb.style.top = `${newTop}px`; 
                    const scrollPercent = newTop / (container.clientHeight - thumb.clientHeight); 
                    content.scrollTop = scrollPercent * (content.scrollHeight - content.clientHeight); 

                    if (previousTop > newTop) {
                            mousedownDirection = 0;
                        } else if (previousTop < newTop) {
                            mousedownDirection = 1;
                        }

                    previousTop = newTop;                    

                }else {

                    mousedownDirection = 1;

                }

            }; 
                    
            const onMouseUp = () => { 

                clearInterval(scrollInterval);
                mousedownDirection = -1;
                thumb.style.top = `${75}px`; 
                document.removeEventListener('mousemove', onMouseMove); 
                document.removeEventListener('mouseup', onMouseUp); 
                document.removeEventListener('mousedown', onMouseDown);                
                
            };            

            const onMouseDown = () => { 
                
                scrollInterval = setInterval(() => {

                    if(mousedownDirection === 0){
                        dotnetHelper.invokeMethodAsync('LoadContainerPreviousYears');
                    }else if(mousedownDirection === 1){
                        dotnetHelper.invokeMethodAsync('LoadContainerMoreYears');
                    }

                }, 100); 
                                
            };

            document.addEventListener('mousemove', onMouseMove); 
            document.addEventListener('mouseup', onMouseUp);
            document.addEventListener('mousedown', onMouseDown);
                            
        });

    }

    </script>